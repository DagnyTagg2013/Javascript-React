
4) TO RUN project

- cd to root project folder where package.json resides
=> npm install
to install/re-install package dependences

=> npm start
to run webpack packager and serve on Http Server

=> goto CHROME Browser URL:
http://localhost:8080

=> click TOP RHS in Chrome for Dev Tools to get DEBUGGER to show


0) Reference Tools for React.js
- https://facebook.github.io/react/docs/installation.html
- https://www.twilio.com/blog/2015/08/setting-up-react-for-es6-with-webpack-and-babel-2.html

1) For Syntax highlighting:
- select Preferences
- select Languages & Frameworks
- select Javascript
- select Javascript Language Version; JSX Harmony

2) From Redux Simple Starter
- delete src folder
- create new one, create NEW entrypoint index.js file

=> React Javascript library which creates HTML to show on Browser
- Components are modules


3) Babel tool to show JSX (compact HTML syntax) => "transpiles" to Javascript ES6:

https://babeljs.io

JSX looks like HTML;
Weback transpiles to JS ES2015 and packages it;
Browser interprets JS;
to produce HTML

ISSUE: Unexpected Token Error within Chrome Browser on (3) above

- http://stackoverflow.com/questions/33460420/babel-loader-jsx-syntaxerror-unexpected-token

- <FROM> ROOT project folder:
=> npm install babel-preset-react

- ensure webpack.config.js has loader:"babel"
configured with presets: including 'react'

=> npm install --save-dev babel-preset-modern-browsers
=> npm uninstall (above)

- http://kleopetrov.me/2016/03/18/everything-about-babel/
- https://github.com/jspm/jspm-cli/issues/2067

4) TO RUN project

- cd to root project folder where package.json resides
=> npm install
to install/re-install package dependences

=> npm start
to run webpack packager and serve on Http Server

=> goto CHROME Browser URL:
http://localhost:8080

=> click TOP RHS in Chrome for Dev Tools to get DEBUGGER to show

*** TODO:  need to set Firewall on Mac?

5) TO RECOVER from bad npm packages

=> recover prior package.json, local node_modules folder
=> do npm install!

6) ENTRYPOINT:

=> index.js is dynamic scripting entrypoint;
=> App is FIRST component
=> and called via JSX tag to RENDER INTO STATIC index.html template via React.DOM.render(...) call!

7) COMPONENTIZATION: (under src/components subfolder)

=> Have ONE Component (UI Type Element) PER File!

=> each Component is a TYPE of UI Control; which can be NESTED
- video_item.js
- video_items_list.js

e.g. Video LIST Component CONTAINs several of VIDEO Item Components

*** see how search_bar.js is component INVOKED via JSX FROM index.js!

8) GOOGLE APIs

- login via Google account
- goto API section off top LHS Browser STACKED hamburger icon
https://accounts.google.com/ServiceLogin?service=cloudconsole&ltmpl=api&osid=1&passive=true&continue=https://console.developers.google.com/#identifier
=> Select YouTube API Manager V3
=> Create Project
   'myfirstreact-162223'
=> Enable API
=> CREATE CREDENTIALs
-  YouTube Data API V3
-  for Web Browser/Javascript
-  for Public data
NAME Browser Key 2;
NO REFERRER site
- click GET CREDENTIALs with API Key:
AIzaSyDBy6w2I6AILIjDzswggfb4NP4ouLsSqkk

TODO:  need to RESTRICT usage of KEY for SECURITY
https://support.google.com/googleapi/answer/6310037?hl=en
=> Goto APPLE/System Preferences/Network
(internal) IP Address on nBlue Wireless:  xxx.xxx.x.xxx
(external) IP Address on Router to Extern:  xx.xxx.xx.xxx

=> install JS NPM Package from Google to call API:
- cd to project directory with package.json
npm install --save youtube-api-search

ATTN:  --save writes to package.json for this project!

TODO:  figure out what SAVE does!

9) NEXT
SECTION #17

10) TODO:  Deploy on Docker:

http://stackoverflow.com/questions/39686997/cant-connect-to-exposed-published-port-from-host

11) User Event-Handling

- see search_bar.js called from index.js
- User event properties on each Component/control with associated callback function/class

12) STATE

- (see search_bar.js)

- property on Component which holds state of control  (ONLY CLASS-BASED COMPONENTS, not applicable to functions)
  * via constructor( ...)
  ATTN:  NEVER set = anywhere else, other than in ctor, OR on JSX tag property= invocation;
         HOWEVER OK to ACCESS!

- setState() call to update based on event-notification callback function
  this notifies React framework to refresh/call render() on all dependent child nodes on DOM

- access state via .term

- KEY DISTINCTIONs:
  - state does NOT change value until setState is called from event-handler for User Input Event
  - RENDER is distinct from backing data change
  - state LIVEs ACROSS HttpRequests and can be modified; props and ctor are @ INIT Component INSTANCE only

13) COMPONENT-BASED

     - setting VALUE of JSX component makes it "controlled", i.e. its state VALUE depends on associated React DOM Element's STATE
     - but state is NOT CHANGED until explicit .setState(...) call  (which in turn happens on UI EVENT handling)
     - not displayed until render() gets
     => any STATE change causes RE-RENDER with new state-associated value;
     BUT STATE doesn't change until explicit .setState(...) call

14) Weird Parts of JSX

- https://zapier.com/engineering/react-js-tutorial-guide-gotchas/
- https://www.reddit.com/r/javascript/comments/3ic12y/react_jsx_and_es6_the_weird_parts/
- http://jamesknelson.com/learn-raw-react-ridiculously-simple-forms/

15) HTML5 BEGINNER's TUTORIAL on DIV tag related module targets for CSS Styles

- http://www.html-5-tutorial.com/div-tag.htm
- http://www.html-5-tutorial.com/div-tag-cont.htm
- http://www.tizag.com/htmlT/htmldiv.php

line break
- http://www.yourhtmlsource.com/myfirstsite/basicformatting.html

16) DIFFERENCE BETWEEN FUNCTION-based vs CLASS-based component

- need state across calls --> CLASS-based
- OTHERWISE, default to function-based as simpler

17) DOWNWARDS DATA-FLOW on Parent APP for AJAX External Data updates
    (i.e. update state data of PARENT; DOWNWARDs DATA FLOW, so highest parent should be responsible for fetching data;
          then will FLOW to CHILDREN)

    *** NOTE:  remember to npm install the API package:  npm install ytsearch!

18) conversion of FUNCTION to CLASS Component whenever you need to store Session STATE (ie over MULTIPLE Http Request/Calls)

- import Component
- class extends Component
- add constructor to set STATE of member variables with default data
- override render() method

19) Issue with API Call due to:

*** 403 error on AJAX call; maybe need to lift URL restriction on API key, regenerate a new one?

*** WIKIHOW to lookup internal/external IP Addresses:
http://www.wikihow.com/Find-Your-IP-Address-on-a-Mac

*** REFER to #8 ABOVE for more info!

20) DEV TOOLS SETUP

10.1) use Chrome Browser, DevTools from Top LHS HAMBURGER menu

10.2) Download React Debug Tools
https://facebook.github.io/react/blog/2015/09/02/new-react-developer-tools.html

10.3) Use Postman from Mac-Local App to hit external APIs

- also see:  ProjectsJava
  - WarmupREST (DropWizard)
  - JPA (Spring Boot)

GET "https://www.googleapis.com/youtube/v3/search?
     part=snippet
     &key=AIzaSyDBy6w2I6AILIjDzswggfb4NP4ouLsSqkk
     &q=surfboards
     &type=video"


21)  Error:  Section 2: Lecture 24


- http://stackoverflow.com/questions/28463807/react-js-map-undefined-is-not-a-function
- http://stackoverflow.com/questions/30668326/what-is-the-difference-between-using-constructor-vs-getinitialstate-in-react-r






